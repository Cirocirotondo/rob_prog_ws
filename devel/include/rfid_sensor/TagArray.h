// Generated by gencpp from file rfid_sensor/TagArray.msg
// DO NOT EDIT!


#ifndef RFID_SENSOR_MESSAGE_TAGARRAY_H
#define RFID_SENSOR_MESSAGE_TAGARRAY_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Pose.h>
#include <rfid_sensor/Tag.h>

namespace rfid_sensor
{
template <class ContainerAllocator>
struct TagArray_
{
  typedef TagArray_<ContainerAllocator> Type;

  TagArray_()
    : header()
    , antennaPose()
    , ntags(0)
    , tags()  {
    }
  TagArray_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , antennaPose(_alloc)
    , ntags(0)
    , tags(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _antennaPose_type;
  _antennaPose_type antennaPose;

   typedef uint32_t _ntags_type;
  _ntags_type ntags;

   typedef std::vector< ::rfid_sensor::Tag_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::rfid_sensor::Tag_<ContainerAllocator> >> _tags_type;
  _tags_type tags;





  typedef boost::shared_ptr< ::rfid_sensor::TagArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rfid_sensor::TagArray_<ContainerAllocator> const> ConstPtr;

}; // struct TagArray_

typedef ::rfid_sensor::TagArray_<std::allocator<void> > TagArray;

typedef boost::shared_ptr< ::rfid_sensor::TagArray > TagArrayPtr;
typedef boost::shared_ptr< ::rfid_sensor::TagArray const> TagArrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rfid_sensor::TagArray_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rfid_sensor::TagArray_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rfid_sensor::TagArray_<ContainerAllocator1> & lhs, const ::rfid_sensor::TagArray_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.antennaPose == rhs.antennaPose &&
    lhs.ntags == rhs.ntags &&
    lhs.tags == rhs.tags;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rfid_sensor::TagArray_<ContainerAllocator1> & lhs, const ::rfid_sensor::TagArray_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rfid_sensor

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rfid_sensor::TagArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rfid_sensor::TagArray_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rfid_sensor::TagArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rfid_sensor::TagArray_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rfid_sensor::TagArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rfid_sensor::TagArray_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rfid_sensor::TagArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "af3038806d5d96b67c9b8bb3b54d8b1b";
  }

  static const char* value(const ::rfid_sensor::TagArray_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xaf3038806d5d96b6ULL;
  static const uint64_t static_value2 = 0x7c9b8bb3b54d8b1bULL;
};

template<class ContainerAllocator>
struct DataType< ::rfid_sensor::TagArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rfid_sensor/TagArray";
  }

  static const char* value(const ::rfid_sensor::TagArray_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rfid_sensor::TagArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This message contains an array of tags\n"
"\n"
"Header header\n"
"geometry_msgs/Pose antennaPose     	# antenna pose\n"
"uint32 ntags         				# number of tags\n"
"\n"
"# an array of tags\n"
"Tag[] tags\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: rfid_sensor/Tag\n"
"# A RFID tag read\n"
"string  name\n"
"float64 dist\n"
"float64 phi\n"
"float64 rssi\n"
;
  }

  static const char* value(const ::rfid_sensor::TagArray_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rfid_sensor::TagArray_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.antennaPose);
      stream.next(m.ntags);
      stream.next(m.tags);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TagArray_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rfid_sensor::TagArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rfid_sensor::TagArray_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "antennaPose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.antennaPose);
    s << indent << "ntags: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.ntags);
    s << indent << "tags[]" << std::endl;
    for (size_t i = 0; i < v.tags.size(); ++i)
    {
      s << indent << "  tags[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::rfid_sensor::Tag_<ContainerAllocator> >::stream(s, indent + "    ", v.tags[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // RFID_SENSOR_MESSAGE_TAGARRAY_H
